// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"github.com/dagger/cloak/sdk/go/dagger"
)

//
func (r *query) qvault(ctx context.Context) (*Qvault, error) {

	return new(Qvault), nil

}

type query struct{}
type qvault struct{}

func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error){
		"Query.qvault": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			return (&query{}).qvault(ctx)
		},
		"Qvault.secret": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var address string

			bytes, err = json.Marshal(fc.Args["address"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &address); err != nil {
				return nil, err
			}

			var token string

			bytes, err = json.Marshal(fc.Args["token"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &token); err != nil {
				return nil, err
			}

			var path string

			bytes, err = json.Marshal(fc.Args["path"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &path); err != nil {
				return nil, err
			}

			var key string

			bytes, err = json.Marshal(fc.Args["key"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &key); err != nil {
				return nil, err
			}

			return (&qvault{}).secret(ctx,

				address,

				token,

				path,

				key,
			)
		},
	})
}
