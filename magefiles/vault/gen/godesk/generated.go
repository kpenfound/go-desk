// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package godesk

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// CompressLambda includes the requested fields of the GraphQL type Lambda.
type CompressLambda struct {
	Compress dagger.Filesystem `json:"compress"`
}

// GetCompress returns CompressLambda.Compress, and is useful for accessing the field via an interface.
func (v *CompressLambda) GetCompress() dagger.Filesystem { return v.Compress }

// CompressResponse is returned by Compress on success.
type CompressResponse struct {
	Lambda CompressLambda `json:"lambda"`
}

// GetLambda returns CompressResponse.Lambda, and is useful for accessing the field via an interface.
func (v *CompressResponse) GetLambda() CompressLambda { return v.Lambda }

// UploadLambda includes the requested fields of the GraphQL type Lambda.
type UploadLambda struct {
	Upload bool `json:"upload"`
}

// GetUpload returns UploadLambda.Upload, and is useful for accessing the field via an interface.
func (v *UploadLambda) GetUpload() bool { return v.Upload }

// UploadResponse is returned by Upload on success.
type UploadResponse struct {
	Lambda UploadLambda `json:"lambda"`
}

// GetLambda returns UploadResponse.Lambda, and is useful for accessing the field via an interface.
func (v *UploadResponse) GetLambda() UploadLambda { return v.Lambda }

// __CompressInput is used internally by genqlient
type __CompressInput struct {
	Directory dagger.FSID `json:"directory"`
}

// GetDirectory returns __CompressInput.Directory, and is useful for accessing the field via an interface.
func (v *__CompressInput) GetDirectory() dagger.FSID { return v.Directory }

// __UploadInput is used internally by genqlient
type __UploadInput struct {
	Aws_access_key_id     string          `json:"aws_access_key_id"`
	Aws_secret_access_key dagger.SecretID `json:"aws_secret_access_key"`
	S3_bucket             string          `json:"s3_bucket"`
	S3_key                string          `json:"s3_key"`
}

// GetAws_access_key_id returns __UploadInput.Aws_access_key_id, and is useful for accessing the field via an interface.
func (v *__UploadInput) GetAws_access_key_id() string { return v.Aws_access_key_id }

// GetAws_secret_access_key returns __UploadInput.Aws_secret_access_key, and is useful for accessing the field via an interface.
func (v *__UploadInput) GetAws_secret_access_key() dagger.SecretID { return v.Aws_secret_access_key }

// GetS3_bucket returns __UploadInput.S3_bucket, and is useful for accessing the field via an interface.
func (v *__UploadInput) GetS3_bucket() string { return v.S3_bucket }

// GetS3_key returns __UploadInput.S3_key, and is useful for accessing the field via an interface.
func (v *__UploadInput) GetS3_key() string { return v.S3_key }

func Compress(
	ctx context.Context,
	directory dagger.FSID,
) (*CompressResponse, error) {
	req := &graphql.Request{
		OpName: "Compress",
		Query: `
query Compress ($directory: FSID!) {
	lambda {
		compress(directory: $directory) {
			id
		}
	}
}
`,
		Variables: &__CompressInput{
			Directory: directory,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data CompressResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Upload(
	ctx context.Context,
	aws_access_key_id string,
	aws_secret_access_key dagger.SecretID,
	s3_bucket string,
	s3_key string,
) (*UploadResponse, error) {
	req := &graphql.Request{
		OpName: "Upload",
		Query: `
query Upload ($aws_access_key_id: String!, $aws_secret_access_key: SecretID!, $s3_bucket: String!, $s3_key: String!) {
	lambda {
		upload(aws_access_key_id: $aws_access_key_id, aws_secret_access_key: $aws_secret_access_key, s3_bucket: $s3_bucket, s3_key: $s3_key)
	}
}
`,
		Variables: &__UploadInput{
			Aws_access_key_id:     aws_access_key_id,
			Aws_secret_access_key: aws_secret_access_key,
			S3_bucket:             s3_bucket,
			S3_key:                s3_key,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data UploadResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
