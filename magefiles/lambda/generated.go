// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"github.com/dagger/cloak/sdk/go/dagger"
)

//
func (r *query) lambda(ctx context.Context) (*Lambda, error) {

	return new(Lambda), nil

}

type lambda struct{}
type query struct{}

func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error){
		"Lambda.upload": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var awsAccessKeyID string

			bytes, err = json.Marshal(fc.Args["awsAccessKeyID"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &awsAccessKeyID); err != nil {
				return nil, err
			}

			var awsSecretAccessKey dagger.SecretID

			bytes, err = json.Marshal(fc.Args["awsSecretAccessKey"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &awsSecretAccessKey); err != nil {
				return nil, err
			}

			var s3Bucket string

			bytes, err = json.Marshal(fc.Args["s3Bucket"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &s3Bucket); err != nil {
				return nil, err
			}

			var s3Key string

			bytes, err = json.Marshal(fc.Args["s3Key"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &s3Key); err != nil {
				return nil, err
			}

			return (&lambda{}).upload(ctx,

				awsAccessKeyID,

				awsSecretAccessKey,

				s3Bucket,

				s3Key,
			)
		},
		"Lambda.compress": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var directory dagger.FSID

			bytes, err = json.Marshal(fc.Args["directory"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &directory); err != nil {
				return nil, err
			}

			return (&lambda{}).compress(ctx,

				directory,
			)
		},
		"Query.lambda": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			return (&query{}).lambda(ctx)
		},
	})
}
